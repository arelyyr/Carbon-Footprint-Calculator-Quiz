#include <iostream>
#include <vector>
#include "transportFunctions.h"
#include <map>
#include <iomanip>
#include <cmath>


std::string transportInput(Queue& userInputObjects)
{
	//prompts user to answer which of transport used most often. valid inputs: car, motorcycle, public
	
	std::cout << "Which form of transportation do you use most often?" << std::endl;
	std::cout << " 1) car \n 2) motorcycle \n 3) public \n";

  std::string transportType;
	
  while (true) {
    //initialize and cin the input
    std::string input;
	  std::cin >> input;

    
    //push transport type selected to queue
    //1 for car then break loop
    if(input == "1")
    {
		  transportType = "car";
      break;
    }
    //2 for motorcycle then break loop
    if(input == "2")
    {
		  transportType = "motorcycle";
      break;
    }
    //3 for public then break loop
    if(input == "3")
    {
		  transportType = "public";
      break;
    }
    //print error message if 1 2 or 3 is not entered
       std::cout << "\nInvalid transport type." 
      << " Please enter 1 for car, 2 for motorcycle, and 3 for public: "
      << std::endl;
	}	 

  //if car is chosen, prompt for the types of cars
	if(transportType == "car")
	{
    //prompt for the type of car driven 
		std::cout<< "Which types of cars do you drive? Enter done when finished: " 
		<< std::endl;
		std::cout << " 1) SUV \n 2) compact \n 3) sedan \n 4) sports \n"
		<< " 5) hybrid \n 6) electric \n";
		
		while (true) {
    std::string input;
    std::cin >> input;
    
    //push all car types that are selected by the user to the queue:
    if(input == "1")
		  userInputObjects.push("SUV");
    else if(input == "2")
      userInputObjects.push("compact");
    else if(input == "3")
      userInputObjects.push("sedan");
    else if(input == "4")
      userInputObjects.push("sports");
    else if(input == "5")
      userInputObjects.push("hybrid");
    else if(input == "6")
      userInputObjects.push("electric");
    // Exit the loop if the user types 'done'
    else if(input == "done")
      break;
      // Check if user input 1 2 or 3, if not then print error message
    else
    {
       std::cout << "\nInvalid car type." 
      << " Please enter 1 for SUV, 2 for compact, 3 for sedan, 4 for sports, 5 for hybrid, and 6 for electric: "
      << std::endl;
    }
	}	 
	
	}

    //if motorocycle is chosen, prompt for the types of motorcycles
	else if(transportType == "motorcycle")
	{
    //prompts user to answer which of transport used most often. valid inputs: small, medium, large
		std::string input;
		std::cout<< "Which types of motorcycles do you ride? Enter done when finished: " 
		<< std::endl;
		std::cout << " 1) small\n 2) medium \n 3) large \n ";


    while (true) {
    std::string input;
    std::cin >> input;
    
    //push car type selected to queue
    if(input == "1")
		  userInputObjects.push("small");
    else if(input == "2")
      userInputObjects.push("medium");
    else if(input == "3")
      userInputObjects.push("large");
    // Exit the loop if the user types 'done'
    else if(input == "done")
      break;
      // Check if user input 1 2 or 3, if not then print error message
    else
    {
       std::cout << "\nInvalid motorcycle type." 
      << " Please enter 1 for small, 2 for medium, and 3 for large: "
      << std::endl;
    }
	}	
}
  //return the transport type car,motorcycle, or public
	return transportType; 
}



double inputMilesAndOutput(std::map<std::string, double> gasEmissions, 
Queue userInputObjects, HashTable& ht)
{
  //stores total emissions generated by user
	double totalEmissions = 0;
  //stores all recommendations given to the user
	std::string recommendation = "";
	
	//iterate through each object in the queue which holds objects from user input
	 while(!userInputObjects.empty())
	 {
    //stores current object in queue. The front of the queue 
		std::string currObject = userInputObjects.getFront(); 
    //amount of days per week user uses the object
		double days;
     //amount of miles per day user drives the transportation
		double miles;

     //prompt for days 
		std::cout << "How many days per week do you drive the " << userInputObjects.getFront()
		 << "?" << std::endl;
		std::cin >> days;

      //prompt for miles per day
		std::cout << "On the days you drive the " << userInputObjects.getFront()
		<< ", how many miles per day do you drive the " << userInputObjects.getFront()
		 << "?" << std::endl;
		std::cin >> miles;

		/*Each object from the queue has an associated co2/mile from the map passed into the function
      This rate times the days per week times the miles per day, computes the total co2 emissions per week
    */
		totalEmissions += miles*(gasEmissions[currObject])*days;
		
    //if object from queue is a car type, give the recommendation for car users
		if(currObject == "SUV" || currObject == "compact" || 
		currObject == "sedan" || currObject == "sports"
		|| currObject == "sedan" || currObject == "hybrid"
		|| currObject == "electric") 
		{
			recommendation = (ht.recommend("car"));
	  }

    //if object from queue is a motorcycle type, give recommendation for motorcycle users
	   else if(currObject == "small" || currObject == "medium" || 
		 currObject == "large")
		{
			recommendation = (ht.recommend("motorcycle"));
	 }
     //pop from queue after added to total emissions and rec is stored.
	    userInputObjects.pop();
	}
  //display total emissions per week
	std::cout << "\nTotal emissions: " << totalEmissions << 
	   " kgCO2/week" << std::endl;
	   
	  
	   //display appropriate rec
	   std::cout << "\nRecommendations to reduce emissions: " << std::endl;
	   std::cout << recommendation << std::endl;

  //return total emissions calculated 
	return totalEmissions;
}
	

void percent_diff(double total, double average)
{
  //compute percent difference
	double difference = total-average;
	double percent = (difference/average)*100;

  //display percent above or below average
	std::cout << std::fixed << std::setprecision(2) <<
	"\nYour total emissions are " << abs(percent) <<
    //if total is above average print above otherwise print below
	"% " << (percent > 0 ? "above" : "below")
	<< " average.";
}
	

void compareToAverageTransport(std::string inputType, double total)
{
	//calculate approximate yearly co2 emissions total from total calculated earlier
	double yearlyTotal = total*52;
  //if input type is car, compare the total to 4600 co2kg
	if(inputType == "car")
	{
    //average yearly emissions for an individual that uses a car
		double average = 4600;
    //if users total is greater than average print out percent diff, and we recommend to decrease emissions
		if(yearlyTotal > average) 
		{
      //call to percent diff
			percent_diff(yearlyTotal, average);
      //we recommend to decrease emissions if above average
			std::cout << " We recommend to decrease your emissions."
			<<std::endl;
		}
    //otherwise your emissions are below average 
		else
		{
			std::cout << "\nCongratulations! "<<std::endl;
      //display percent diff below average
			percent_diff(yearlyTotal,average);
		}
	}
  //if input type is car, compare the total to 487 co2kg
	else if(inputType == "motorcycle")
	{
    //average yearly emissions for an individual that uses a motorcycle
		double average = 487;

    //if users total is greater than average print out percent diff, and we recommend to decrease emissions
		if(yearlyTotal > average) 
		{
      //call to percent diff
			percent_diff(yearlyTotal, average);
      //we recommend to decrease emissions if above average
			std::cout << " We recommend to decrease your emissions."
			<<std::endl;
		}
      //otherwise your emissions are below average 
		else
		{
			std::cout << "\nCongratulations! "<<std::endl;
			percent_diff(yearlyTotal,average);
		}
	}
} 

void transport(std::map<std::string, double> gasEmissions, HashTable& recommendations)
{
  //Queue which holds the user input objects, used for calculating emissions and providing recommendations
	Queue userInputObjects;

  //stores input type, either car, motorcycle or public
	std::string inputType = transportInput(userInputObjects);
  
  if(inputType != "public")
  {
    /*if the input type is not public, output total weekly emissions, 
      recs, and output the percent above or below average
    */
    int totalEmissions = inputMilesAndOutput(gasEmissions, userInputObjects, recommendations);
	  compareToAverageTransport(inputType, totalEmissions);
  }
    /*if the user chooses public, display general information and alternatives to public transport
      
      an emission calculation for an individual would be inaccurate since the point of public transport is to be transported with multiple people at once. The amount of people at a time using a single public transportation, widely varies. 
    */
  else{
    std::cout << "Public transportation is an effective way to reduce your emissions since a large number of people can be transported at once, reducing the number of cars on the road. In addition to public transportation or carpooling, you should consider walking or biking, for short trips." << std::endl;
  }
  
}












